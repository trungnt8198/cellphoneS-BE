<body>
  <div class="app-container">
    <!-- Main Content -->
    <main class="content-wrapper">
      <div class="content-header">
        <h1><%= title %></h1>
        <div>
          <button
            id="bulkApproveBtn"
            class="btn btn-success"
            style="margin-right: 10px"
          >
            <i class="fas fa-check"></i> Approve Selected
          </button>
          <button id="bulkRejectBtn" class="btn btn-danger">
            <i class="fas fa-ban"></i> Reject Selected
          </button>
        </div>
      </div>

      <!-- Filter Bar -->
      <div class="filter-bar">
        <form id="filterForm" class="filter-form" novalidate>
          <div class="form-group">
            <label for="filterText">Search</label>
            <input
              type="text"
              id="filterText"
              class="form-control"
              placeholder="Search comments..."
            />
            <span class="error-text" id="filterTextError"
              >Please enter valid search text.</span
            >
          </div>

          <div class="form-group">
            <label for="filterPost">Post</label>
            <select id="filterPost" class="form-control">
              <option value="">All Posts</option>
              <option value="1">10 Tips for Better Productivity</option>
              <option value="2">The Future of AI in Business</option>
              <option value="3">5 Morning Habits of Successful People</option>
              <option value="4">
                How to Build a Successful E-commerce Business
              </option>
              <option value="5">The Complete Guide to Digital Marketing</option>
              <option value="6">The Rise of Remote Work</option>
            </select>
            <span class="error-text" id="filterPostError"
              >Please select a valid post.</span
            >
          </div>

          <div class="form-group">
            <label for="filterStatus">Status</label>
            <select id="filterStatus" class="form-control">
              <option value="">All Statuses</option>
              <option value="approved">Approved</option>
              <option value="pending">Pending</option>
              <option value="rejected">Rejected</option>
            </select>
            <span class="error-text" id="filterStatusError"
              >Please select a valid status.</span
            >
          </div>

          <div class="form-group filter-actions">
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-filter"></i> Filter
            </button>
            <button
              type="button"
              id="resetFilters"
              class="btn btn-secondary"
              style="margin-left: 10px"
            >
              <i class="fas fa-times"></i> Reset
            </button>
          </div>
        </form>
      </div>

      <!-- Data Table -->
      <div class="table-container">
        <table class="data-table">
          <thead>
            <tr>
              <th style="width: 40px">
                <input type="checkbox" id="selectAll" />
              </th>
              <th>Comment</th>
              <th>Author</th>
              <th>Post</th>
              <th>Date</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <!-- Comment rows -->
            <% for(let comment of comments) { %>
            <tr data-id="<%= comment.id %>">
              <td>
                <input type="checkbox" class="comment-checkbox" />
              </td>
              <td>
                <div style="display: flex; flex-direction: column">
                  <div class="item-title"><%= comment.content %></div>
                  <div class="item-subtitle" style="margin-top: 5px">
                    <a href="post-detail.html?id=1">View Post</a>
                  </div>
                </div>
              </td>
              <td>Sarah Johnson</td>
              <td>10 Tips for Better Productivity</td>
              <% const createdAt= new Date(comment.created_at) %>
              <td><%= createdAt.toISOString() ?? "Chưa cập nhật"%></td>
              <td>
                <span class="badge badge-success">Approved</span>
              </td>
              <td>
                <div class="action-buttons">
                  <a
                    href="/admin/comments/<%= comment.id %>"
                    class="action-btn view"
                    title="View"
                  >
                    <i class="fas fa-eye"></i>
                  </a>
                  <a
                    href="/admin/comments/<%= comment.id %>/edit"
                    class="action-btn edit"
                    title="Edit"
                  >
                    <i class="fas fa-edit"></i>
                  </a>
                  <a
                    href="#"
                    class="action-btn delete delete-item"
                    title="Delete"
                    data-id="1"
                    data-name="Comment from Sarah Johnson"
                  >
                    <i class="fas fa-trash"></i>
                  </a>
                </div>
              </td>
            </tr>
            <% } %>
          </tbody>
        </table>

        <!-- Pagination -->
        <div class="pagination-container">
          <div class="pagination-info">Showing 1-6 of 24 comments</div>
          <ul class="pagination">
            <li class="active">
              <a href="#" data-page="1">1</a>
            </li>
            <li><a href="#" data-page="2">2</a></li>
            <li><a href="#" data-page="3">3</a></li>
            <li><a href="#" data-page="4">4</a></li>
          </ul>
        </div>
      </div>
    </main>
  </div>

  <!-- Confirm Dialog -->
  <div class="modal" id="confirmDeleteModal">
    <div class="modal-content">
      <h3 class="modal-title">Confirm Delete</h3>
      <div class="modal-body">
        Are you sure you want to delete "<span id="deleteItemName"></span>"?
        This action cannot be undone.
      </div>
      <div class="modal-footer">
        <button
          type="button"
          id="cancelDelete"
          class="btn btn-secondary"
          data-cancel
        >
          Cancel
        </button>
        <button
          type="button"
          id="confirmDelete"
          class="btn btn-danger"
          data-confirm
        >
          Delete
        </button>
      </div>
    </div>
  </div>

  <script src="assets/js/common.js"></script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      // Initialize form validation
      initFormValidation("filterForm");

      // Setup filter form
      const filterForm = document.getElementById("filterForm");
      filterForm.addEventListener("submit", function (event) {
        event.preventDefault();

        if (validateForm("filterForm")) {
          // Get filter values
          const text = document.getElementById("filterText").value;
          const post = document.getElementById("filterPost").value;
          const status = document.getElementById("filterStatus").value;

          // Filter comments (in a real application, this would likely be an API call)
          console.log("Filtering with:", {
            text,
            post,
            status,
          });

          // Show success message
          showMessage(
            "filterSuccess",
            `Applied filters: Text="${text}", Post="${post}", Status="${status}"`,
            3000
          );
        }
      });

      // Reset filters
      document
        .getElementById("resetFilters")
        .addEventListener("click", function () {
          resetForm("filterForm");
        });

      // Setup pagination
      const paginationLinks = document.querySelectorAll(".pagination li a");
      paginationLinks.forEach((link) => {
        link.addEventListener("click", function (e) {
          e.preventDefault();

          // Remove active class from all links
          paginationLinks.forEach((l) =>
            l.parentElement.classList.remove("active")
          );

          // Add active class to clicked link
          this.parentElement.classList.add("active");

          // Get page number
          const page = this.getAttribute("data-page");

          // Update pagination info
          document.querySelector(".pagination-info").textContent = `Showing ${
            (page - 1) * 10 + 1
          }-${Math.min(page * 10, 24)} of 24 comments`;
        });
      });

      // Setup delete confirmation
      const deleteButtons = document.querySelectorAll(".delete-item");
      deleteButtons.forEach((button) => {
        button.addEventListener("click", async function (e) {
          e.preventDefault();

          const itemId = this.getAttribute("data-id");
          const itemName = this.getAttribute("data-name");

          // Set item name in modal
          document.getElementById("deleteItemName").textContent = itemName;

          // Show confirmation dialog
          const result = await showConfirmDialog("confirmDeleteModal", {
            title: "Confirm Delete",
            message: `Are you sure you want to delete "${itemName}"? This action cannot be undone.`,
          });

          if (result) {
            // Delete the comment (in a real application, this would likely be an API call)
            console.log(`Deleting comment with ID: ${itemId}`);

            // Remove comment from table
            const itemRow = document.querySelector(`tr[data-id="${itemId}"]`);
            if (itemRow) {
              itemRow.remove();
            }
          }
        });
      });

      // Setup select all checkbox
      const selectAllCheckbox = document.getElementById("selectAll");
      const commentCheckboxes = document.querySelectorAll(".comment-checkbox");

      selectAllCheckbox.addEventListener("change", function () {
        commentCheckboxes.forEach((checkbox) => {
          checkbox.checked = this.checked;
        });
        updateBulkButtons();
      });

      commentCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener("change", updateBulkButtons);
      });

      function updateBulkButtons() {
        const checkedCount = document.querySelectorAll(
          ".comment-checkbox:checked"
        ).length;
        const bulkApproveBtn = document.getElementById("bulkApproveBtn");
        const bulkRejectBtn = document.getElementById("bulkRejectBtn");

        bulkApproveBtn.disabled = checkedCount === 0;
        bulkRejectBtn.disabled = checkedCount === 0;
      }

      // Setup bulk action buttons
      document
        .getElementById("bulkApproveBtn")
        .addEventListener("click", function () {
          processSelectedComments("approve");
        });

      document
        .getElementById("bulkRejectBtn")
        .addEventListener("click", function () {
          processSelectedComments("reject");
        });

      function processSelectedComments(action) {
        const selectedCheckboxes = document.querySelectorAll(
          ".comment-checkbox:checked"
        );
        const count = selectedCheckboxes.length;

        if (count === 0) return;

        // Get selected comment IDs
        const commentIds = Array.from(selectedCheckboxes).map((checkbox) => {
          return checkbox.closest("tr").getAttribute("data-id");
        });

        // In a real app, this would be an API call
        console.log(
          `${
            action === "approve" ? "Approving" : "Rejecting"
          } comments with IDs:`,
          commentIds
        );

        // Show feedback to user
        showMessage(
          "actionSuccess",
          `${count} comment${count > 1 ? "s" : ""} ${
            action === "approve" ? "approved" : "rejected"
          } successfully`,
          3000
        );

        // Update UI to reflect changes
        selectedCheckboxes.forEach((checkbox) => {
          const row = checkbox.closest("tr");
          const statusCell = row.querySelector("td:nth-child(6) .badge");

          if (action === "approve") {
            statusCell.className = "badge badge-success";
            statusCell.textContent = "Approved";
          } else {
            statusCell.className = "badge badge-danger";
            statusCell.textContent = "Rejected";
          }

          // Uncheck the checkbox
          checkbox.checked = false;
        });

        // Uncheck "select all" checkbox
        document.getElementById("selectAll").checked = false;
        updateBulkButtons();
      }

      // Initialize bulk buttons state
      updateBulkButtons();
    });
  </script>
</body>
